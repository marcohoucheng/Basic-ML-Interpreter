Welcome to TinyML
entering interactive mode...

> let id x = x;;
AST:    LetIn ((false, "id", None, Lambda ("x",None,Var "x")),Var "id")
pretty: let id = fun x -> x in id

We are type inferencing the expression Let (x, tyo, e1, e2) = Let ("id", <null>, Lambda ("x",None,Var "x"), Var "id")

We are type inferencing the expression Lambda (x, tyo, e) = Lambda ("x", <null>, Var "x")
Lambda creating new counter

fresh now has counter 1

We are type inferencing Var x = "x"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyVar 1
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:


We are type inferencing Var x = "id"
Instantiating Forall(tvs,t)
Where tvs = set [1]
and t = TyArrow (TyVar 1,TyVar 1)
These need to be refreshed with new TyVar: set [1]

fresh now has counter 2
The new subst with TyVar to be refreshed:
(1, TyVar 2)

type:   '2 -> '2
value:  <|[];x;x|>

val id : '2 -> '2 = <|[];x;x|>

> let idid x = id (id x);;
AST:    LetIn
  ((false, "idid", None, Lambda ("x",None,App (Var "id",App (Var "id",Var "x")))),
   Var "idid")
pretty: let idid = fun x -> id (id x) in idid

We are type inferencing the expression Let (x, tyo, e1, e2) = Let ("idid", <null>, Lambda ("x",None,App (Var "id",App (Var "id",Var "x"))), Var "idid")

We are type inferencing the expression Lambda (x, tyo, e) = Lambda ("x", <null>, App (Var "id",App (Var "id",Var "x")))
Lambda creating new counter

fresh now has counter 3

We are type inferencing the expression App(e1, e2) = App(Var "id", App (Var "id",Var "x"))

We are type inferencing Var x = "id"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyVar 2,TyVar 2)
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:


We are type inferencing the expression App(e1, e2) = App(Var "id", Var "x")

We are type inferencing Var x = "id"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyVar 2,TyVar 2)
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:


We are type inferencing Var x = "x"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyVar 3
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 4
App creating new counter

fresh now has counter 5

We are type inferencing Var x = "idid"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyVar 5,TyVar 5)
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

type:   '5 -> '5
value:  <|[id=<|[];x;x|>];x;id (id x)|>

val idid : '5 -> '5 = <|[id=<|[];x;x|>];x;id (id x)|>

> let add x y = x + y;;
AST:    LetIn
  ((false, "add", None,
    Lambda ("x",None,Lambda ("y",None,BinOp (Var "x","+",Var "y")))),Var "add")
pretty: let add = fun x -> fun y -> x + y in add

We are type inferencing the expression Let (x, tyo, e1, e2) = Let ("add", <null>, Lambda ("x",None,Lambda ("y",None,BinOp (Var "x","+",Var "y"))), Var "add")

We are type inferencing the expression Lambda (x, tyo, e) = Lambda ("x", <null>, Lambda ("y",None,BinOp (Var "x","+",Var "y")))
Lambda creating new counter

fresh now has counter 6

We are type inferencing the expression Lambda (x, tyo, e) = Lambda ("y", <null>, BinOp (Var "x","+",Var "y"))
Lambda creating new counter

fresh now has counter 7

We are type inferencing the BinOpInt

We are type inferencing the expression App(e1, e2) = App(App (Var "+",Var "x"), Var "y")

We are type inferencing the expression App(e1, e2) = App(Var "+", Var "x")

We are type inferencing Var x = "+"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyArrow (TyName "int",TyName "int"))
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:


We are type inferencing Var x = "x"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyVar 6
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 8

We are type inferencing Var x = "y"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyVar 7
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 9

We are type inferencing Var x = "add"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyArrow (TyName "int",TyName "int"))
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

type:   int -> int -> int
value:  <|[idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;fun y -> x + y|>

val add : int -> int -> int = <|[idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;fun y -> x + y|>

> let add1 x = add 1 x;;
AST:    LetIn
  ((false, "add1", None,
    Lambda ("x",None,App (App (Var "add",Lit (LInt 1)),Var "x"))),Var "add1")
pretty: let add1 = fun x -> (add 1) x in add1

We are type inferencing the expression Let (x, tyo, e1, e2) = Let ("add1", <null>, Lambda ("x",None,App (App (Var "add",Lit (LInt 1)),Var "x")), Var "add1")

We are type inferencing the expression Lambda (x, tyo, e) = Lambda ("x", <null>, App (App (Var "add",Lit (LInt 1)),Var "x"))
Lambda creating new counter

fresh now has counter 10

We are type inferencing the expression App(e1, e2) = App(App (Var "add",Lit (LInt 1)), Var "x")

We are type inferencing the expression App(e1, e2) = App(Var "add", Lit (LInt 1))

We are type inferencing Var x = "add"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyArrow (TyName "int",TyName "int"))
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 11

We are type inferencing Var x = "x"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyVar 10
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 12

We are type inferencing Var x = "add1"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyName "int")
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

type:   int -> int
value:  <|[add=<|[idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;fun y -> x + y|>; idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;(add 1) x|>

val add1 : int -> int = <|[add=<|[idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;fun y -> x + y|>; idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;(add 1) x|>

> let add2 x = add1 add1 x;;
AST:    LetIn
  ((false, "add2", None,
    Lambda ("x",None,App (App (Var "add1",Var "add1"),Var "x"))),Var "add2")
pretty: let add2 = fun x -> (add1 add1) x in add2

We are type inferencing the expression Let (x, tyo, e1, e2) = Let ("add2", <null>, Lambda ("x",None,App (App (Var "add1",Var "add1"),Var "x")), Var "add2")

We are type inferencing the expression Lambda (x, tyo, e) = Lambda ("x", <null>, App (App (Var "add1",Var "add1"),Var "x"))
Lambda creating new counter

fresh now has counter 13

We are type inferencing the expression App(e1, e2) = App(App (Var "add1",Var "add1"), Var "x")

We are type inferencing the expression App(e1, e2) = App(Var "add1", Var "add1")

We are type inferencing Var x = "add1"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyName "int")
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:


We are type inferencing Var x = "add1"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyName "int")
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 14

type error: cannot unify types TyName "int" and TyArrow (TyName "int",TyName "int")

> let add2 x = add1 (add1 x);;
AST:    LetIn
  ((false, "add2", None,
    Lambda ("x",None,App (Var "add1",App (Var "add1",Var "x")))),Var "add2")
pretty: let add2 = fun x -> add1 (add1 x) in add2

We are type inferencing the expression Let (x, tyo, e1, e2) = Let ("add2", <null>, Lambda ("x",None,App (Var "add1",App (Var "add1",Var "x"))), Var "add2")

We are type inferencing the expression Lambda (x, tyo, e) = Lambda ("x", <null>, App (Var "add1",App (Var "add1",Var "x")))
Lambda creating new counter

fresh now has counter 15

We are type inferencing the expression App(e1, e2) = App(Var "add1", App (Var "add1",Var "x"))

We are type inferencing Var x = "add1"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyName "int")
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:


We are type inferencing the expression App(e1, e2) = App(Var "add1", Var "x")

We are type inferencing Var x = "add1"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyName "int")
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:


We are type inferencing Var x = "x"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyVar 15
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 16
App creating new counter

fresh now has counter 17

We are type inferencing Var x = "add2"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyName "int")
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

type:   int -> int
value:  <|[add1=<|[add=<|[idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;fun y -> x + y|>; idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;(add 1) x|>; add=<|[idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;fun y -> x + y|>; idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;add1 (add1 x)|>

val add2 : int -> int = <|[add1=<|[add=<|[idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;fun y -> x + y|>; idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;(add 1) x|>; add=<|[idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;fun y -> x + y|>; idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];x;add1 (add1 x)|>

> id "hello";;
AST:    App (Var "id",Lit (LString "hello"))
pretty: id "hello"

We are type inferencing the expression App(e1, e2) = App(Var "id", Lit (LString "hello"))

We are type inferencing Var x = "id"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyVar 2,TyVar 2)
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 18
type:   string
value:  "hello"

val it : string = "hello"

> id (3, "hello", 4.1);;

syntax error: encountered token <COMMA> but expected <KET>
at token: [|','|]
location: { pos_fname = "LINE"
  pos_lnum = 1
  pos_bol = 0
  pos_cnum = 7 }

> id (3, 2);;

syntax error: encountered token <COMMA> but expected <KET>
at token: [|','|]
location: { pos_fname = "LINE"
  pos_lnum = 1
  pos_bol = 0
  pos_cnum = 7 }

> add 2 3;;
AST:    App (App (Var "add",Lit (LInt 2)),Lit (LInt 3))
pretty: (add 2) 3

We are type inferencing the expression App(e1, e2) = App(App (Var "add",Lit (LInt 2)), Lit (LInt 3))

We are type inferencing the expression App(e1, e2) = App(Var "add", Lit (LInt 2))

We are type inferencing Var x = "add"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyArrow (TyName "int",TyName "int"))
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 19
App creating new counter

fresh now has counter 20
type:   int
value:  5

val it : int = 5

> add1 4;;
AST:    App (Var "add1",Lit (LInt 4))
pretty: add1 4

We are type inferencing the expression App(e1, e2) = App(Var "add1", Lit (LInt 4))

We are type inferencing Var x = "add1"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyName "int")
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 21
type:   int
value:  5

val it : int = 5

> add2 5;;
AST:    App (Var "add2",Lit (LInt 5))
pretty: add2 5

We are type inferencing the expression App(e1, e2) = App(Var "add2", Lit (LInt 5))

We are type inferencing Var x = "add2"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyName "int")
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 22
type:   int
value:  7

val it : int = 7

> add (add2 7);;
AST:    App (Var "add",App (Var "add2",Lit (LInt 7)))
pretty: add (add2 7)

We are type inferencing the expression App(e1, e2) = App(Var "add", App (Var "add2",Lit (LInt 7)))

We are type inferencing Var x = "add"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyArrow (TyName "int",TyName "int"))
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:


We are type inferencing the expression App(e1, e2) = App(Var "add2", Lit (LInt 7))

We are type inferencing Var x = "add2"
Instantiating Forall(tvs,t)
Where tvs = set []
and t = TyArrow (TyName "int",TyName "int")
These need to be refreshed with new TyVar: set []
The new subst with TyVar to be refreshed:

App creating new counter

fresh now has counter 23
App creating new counter

fresh now has counter 24
type:   int -> int
value:  <|[x=9; idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];y;x + y|>

val it : int -> int = <|[x=9; idid=<|[id=<|[];x;x|>];x;id (id x)|>; id=<|[];x;x|>];y;x + y|>